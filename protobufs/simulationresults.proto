import "dna.proto";
import "problem.proto";

package SimulationResultBuffers;

/*
 * SimulationsDataBank stores results for lots of simulations which may or may
 * not have any relation to each other. It has no purpose other than to be a
 * container, to allow the serialization of lots of data into a single file.
 * [Not currently used.]
message SimulationsDataBank {
    repeated SimulationsData = 31;
}*/

/*
 * SimulationsData stores results for multiple simulations, each of which will
 * have different configurations, but all of which will have the same whiskers.
 */
message SimulationsData {
    optional ProblemBuffers.ProblemSettings settings = 21;
    optional RemyBuffers.WhiskerTree whiskers = 22;
    optional RemyBuffers.FinTree fins = 24;
    repeated SimulationRunData run_data = 23; // one for each config
}

/*
 * SimulationRunData stores the data relating to a single simulation, i.e. some
 * known configuration, lots of data points.
 */
message SimulationRunData {
    optional RemyBuffers.NetConfig config = 11;
    repeated SimulationRunDataPoint point = 12; // one for each timestamp
}

/*
 * SimulationRunDataPoint stores the data associated with a single point (in
 * time). Currently, it only has fields for metrics calculated for the entire
 * time since the start of the simulation (as opposed to instantaneous or moving
 * average measures), because the evaluator only supports this calculation.
 * There are lots of these, so use small numbers.
 */
message SimulationRunDataPoint {
    repeated SenderDataPoint sender_data = 1; // one for each sender
    optional float seconds = 2;
}

/*
 * SenderDataPoint stores the data associated with a single point (in time) and
 * sender.
 */
message SenderDataPoint {
    optional RemyBuffers.Memory memory = 1;
    optional float average_throughput = 4;
    optional float average_delay = 5;
    optional float sending_duration = 6;
    optional uint32 packets_received = 7;
    optional float total_delay = 8;
    optional uint32 window_size = 9;
    optional float intersend_time = 10;
    optional bool sending = 11;
    optional float lambda = 12;
}
